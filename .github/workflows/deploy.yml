name: Deploy to production

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  API_ECR_REPOSITORY: ${{ vars.API_ECR_REPOSITORY }}
  WEB_ECR_REPOSITORY: ${{ vars.WEB_ECR_REPOSITORY }}
  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME }}
  API_SERVICE_NAME: ${{ vars.API_SERVICE_NAME }}
  WEB_SERVICE_NAME: ${{ vars.WEB_SERVICE_NAME }}
  API_TASK_FAMILY: ${{ vars.API_TASK_FAMILY }}
  WEB_TASK_FAMILY: ${{ vars.WEB_TASK_FAMILY }}
  API_CODEDEPLOY_APP: ${{ vars.API_CODEDEPLOY_APP }}
  API_CODEDEPLOY_GROUP: ${{ vars.API_CODEDEPLOY_GROUP }}
  WEB_CODEDEPLOY_APP: ${{ vars.WEB_CODEDEPLOY_APP }}
  WEB_CODEDEPLOY_GROUP: ${{ vars.WEB_CODEDEPLOY_GROUP }}
  API_CONTAINER_PORT: ${{ vars.API_CONTAINER_PORT }}
  WEB_CONTAINER_PORT: ${{ vars.WEB_CONTAINER_PORT }}
  MIGRATION_COMMAND: ${{ vars.MIGRATION_COMMAND }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      api_image_uri: ${{ steps.push_api.outputs.image_uri }}
      web_image_uri: ${{ steps.push_web.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push API image
        id: push_api
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build -t "${API_ECR_REPOSITORY}:${IMAGE_TAG}" -f apps/api/Dockerfile .
          docker push "${API_ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "image_uri=${API_ECR_REPOSITORY}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build and push Web image
        id: push_web
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build -t "${WEB_ECR_REPOSITORY}:${IMAGE_TAG}" -f apps/web/Dockerfile .
          docker push "${WEB_ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "image_uri=${WEB_ECR_REPOSITORY}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Register API task definition revision
        id: register_api
        env:
          IMAGE_URI: ${{ needs.build-and-push.outputs.api_image_uri }}
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${API_TASK_FAMILY}" \
            --query 'taskDefinition' > api-taskdef.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)
            | .containerDefinitions = (.containerDefinitions | map(if .name == "api" then .image = env.IMAGE_URI else . end))' \
            api-taskdef.json > api-taskdef-updated.json
          API_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://api-taskdef-updated.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "arn=${API_TASK_DEF_ARN}" >> "$GITHUB_OUTPUT"

      - name: Register Web task definition revision
        id: register_web
        env:
          IMAGE_URI: ${{ needs.build-and-push.outputs.web_image_uri }}
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${WEB_TASK_FAMILY}" \
            --query 'taskDefinition' > web-taskdef.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)
            | .containerDefinitions = (.containerDefinitions | map(if .name == "web" then .image = env.IMAGE_URI else . end))' \
            web-taskdef.json > web-taskdef-updated.json
          WEB_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://web-taskdef-updated.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "arn=${WEB_TASK_DEF_ARN}" >> "$GITHUB_OUTPUT"

      - name: Create AppSpec files
        run: |
          cat <<JSON > appspec-api.json
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.register_api.outputs.arn }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "api",
                      "ContainerPort": ${API_CONTAINER_PORT}
                    }
                  }
                }
              }
            ]
          }
          JSON

          cat <<JSON > appspec-web.json
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.register_web.outputs.arn }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "web",
                      "ContainerPort": ${WEB_CONTAINER_PORT}
                    }
                  }
                }
              }
            ]
          }
          JSON

      - name: Trigger API blue/green deployment
        id: trigger_api
        run: |
          set -euo pipefail
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${API_CODEDEPLOY_APP}" \
            --deployment-group-name "${API_CODEDEPLOY_GROUP}" \
            --revision '{"revisionType":"AppSpecContent","appSpecContent":{"content":'"$(jq -c . appspec-api.json)"'}}' \
            --query 'deploymentId' --output text)
          echo "id=${DEPLOYMENT_ID}" >> "$GITHUB_OUTPUT"

      - name: Trigger Web blue/green deployment
        id: trigger_web
        run: |
          set -euo pipefail
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${WEB_CODEDEPLOY_APP}" \
            --deployment-group-name "${WEB_CODEDEPLOY_GROUP}" \
            --revision '{"revisionType":"AppSpecContent","appSpecContent":{"content":'"$(jq -c . appspec-web.json)"'}}' \
            --query 'deploymentId' --output text)
          echo "id=${DEPLOYMENT_ID}" >> "$GITHUB_OUTPUT"

      - name: Run database migrations
        id: run_migrations
        continue-on-error: true
        run: |
          ./scripts/run-migrations.sh

      - name: Roll back deployments if migrations failed
        if: steps.run_migrations.outcome == 'failure'
        run: |
          set -euo pipefail
          aws deploy stop-deployment --deployment-id "${{ steps.trigger_api.outputs.id }}" --auto-rollback-enabled || true
          aws deploy stop-deployment --deployment-id "${{ steps.trigger_web.outputs.id }}" --auto-rollback-enabled || true
          exit 1

      - name: Continue API deployment after successful migrations
        run: |
          aws deploy continue-deployment --deployment-id "${{ steps.trigger_api.outputs.id }}"

      - name: Continue Web deployment after successful migrations
        run: |
          aws deploy continue-deployment --deployment-id "${{ steps.trigger_web.outputs.id }}"

      - name: Wait for API deployment to finish
        run: |
          aws deploy wait deployment-successful --deployment-id "${{ steps.trigger_api.outputs.id }}"

      - name: Wait for Web deployment to finish
        run: |
          aws deploy wait deployment-successful --deployment-id "${{ steps.trigger_web.outputs.id }}"
